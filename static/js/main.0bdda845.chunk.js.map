{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StarsDisplay","props","utils","range","count","map","starId","key","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","available","used","wrong","candidate","sum","arr","reduce","acc","curr","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarGame","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","candidatesAreWrong","numberStatus","includes","onNumberClick","currentStatus","newCandidateNums","filter","cn","newAvailableNums","n","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bdda845.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport './App.css';\n\nconst StarsDisplay = props => (\n  <>\n    {utils.range(1, props.count).map(starId => (\n      <div key={starId} className=\"star\" />\n    ))}\n  </>\n);\n\nconst PlayNumber = props => (\n  <button\n    className=\"number\"\n    style={{backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n\t<div className=\"game-done\">\n  \t<div \n    \tclassName=\"message\"\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\n    >\n  \t  {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\n  \t</div>\n\t  <button onClick={props.onClick}>Play Again</button>\n\t</div>\n);\n\nconst StarGame = () => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  \n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n\tuseEffect(() => {\n  \tif (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n\t      setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n    \treturn () => clearTimeout(timerId);\n  \t}\n  });  \n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  \n  const gameStatus = availableNums.length === 0 \n  \t? 'won'\n    : secondsLeft === 0 ? 'lost' : 'active'  \n  \n  const resetGame = () => {\n  \tsetStars(utils.random(1, 9));\n    setAvailableNums(utils.range(1, 9));\n    setCandidateNums([]);\n  };\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n\n\t\tconst newCandidateNums =\n      currentStatus === 'available'\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return (\n    <div className=\"game\" >\n      <div className=\"header\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (\n          \t<PlayAgain onClick={resetGame} gameStatus={gameStatus} />\n          ) : (\n          \t<StarsDisplay count={stars} />\n          )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => (\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              number={number}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n      <a\n    className=\"link\"\n    href=\"https://reactjs.org\"\n    >\n    Learn React\n    </a>\n    </div>\n  );\n};\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default StarGame;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport StarGame from './App'\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <StarGame />,\n    document.getElementById('root')\n    );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}